{"version":3,"file":"event_bus.js","sources":["../src/utils.js","../src/main.js"],"sourcesContent":["\r\n /**\r\n  * 类型判断函数\r\n  * @param {*} arg \r\n  * @param {*} type \r\n  */\r\n function checkType (arg, type)  {\r\n    if ([...arguments].length >= 2) {\r\n        let proType =  Object.prototype.toString.apply(arg);\r\n        return proType.substring(8, proType.length-1).toLowerCase() === type.toLowerCase()\r\n    }\r\n}\r\n\r\n  /**\r\n     * 判断是否为一个函数\r\n     * @param {*} cb \r\n     */\r\n    function isFun(cb) {\r\n        if (checkType(cb, 'function')) {\r\n            return true;\r\n        } else {\r\n            throw new Error('rguments callBack accept a Function');\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 日志打印\r\n     * @param {*} msg \r\n     */\r\n     function log(msg) {\r\n         console.log(msg)\r\n    }\r\n\r\nmodule.exports = {\r\n    checkType,\r\n    isFun,\r\n    log\r\n}\r\n","const utils = require('./utils')\r\nconst _emitList = Symbol('_emitList');\r\nconst _eventList = Symbol('_eventList');\r\nconst _debug = Symbol('_debug');\r\n/**\r\n * 事件订阅发布\r\n * @param {Object} option \r\n */\r\n\r\nclass event_bus {\r\n    constructor(option) {\r\n        // 调式模式\r\n        this[_debug] = option ? option.debug || false : false\r\n        console.log(this[_debug])\r\n        // 事件订阅队列\r\n        this[_eventList] = new Map();\r\n        // 事件发布队列\r\n        this[_emitList] = new Map();\r\n    }\r\n\r\n    /**\r\n     * 注册回调函数\r\n     * @param {*} type 注册主题\r\n     * @param {Function} cb  回调函数\r\n     * @param {Boolean} flag  true:向函数队列头插入\r\n     * @param {Boolean} offline  true:支持离线消息\r\n     */\r\n    on(type, cb, flag, offline) {\r\n        if (utils.isFun(cb)) {\r\n            if (this[_eventList].has(type)) {\r\n                let fns = this[_eventList].get(type)\r\n                // flag为true,则向前插入\r\n                if (flag) {\r\n                    this[_eventList].set(type, [cb].concat(fns));\r\n                } else {\r\n                   this[_eventList].set(type, fns.concat([cb]));\r\n                }\r\n            } else {\r\n                this[_eventList].set(type, [cb])\r\n            }\r\n            // 如果是离线订阅，则执行缓存的emit list\r\n            if (offline) {\r\n                if (this[_emitList].has(type)) {\r\n                    let msgList = this[_emitList].get(type)\r\n                    // 异步执行，防止阻塞订阅\r\n                    setTimeout(() => {\r\n                        msgList.forEach(msg => {\r\n                            cb(msg)\r\n                        })\r\n                    }, 0)\r\n                }\r\n            }\r\n            this[_debug] && utils.log(`${type} register a handler `)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 注册回调函数，只回调一次\r\n     * @param {*} type 注册主题\r\n     * @param {Function} cb  回调函数\r\n     * @param {*} flag  true:向函数队列头插入\r\n     */\r\n    once(type, cb, flag) {\r\n        let temp = function () {\r\n            cb(...arguments);\r\n            this.off(type, temp)\r\n        }\r\n        this.on(type, temp, false)\r\n    }\r\n    /**\r\n  * 事件发布函数\r\n  * @param {*} type 事件主题 \r\n  * @param {*} msg  发布消息\r\n  */\r\n    emit(type, ...msg) {\r\n        let msgList = [...msg];\r\n        // 缓存发布记录\r\n        if (this[_emitList].has(type)) {\r\n            let msgs = this[_emitList].get(type);\r\n            this[_emitList].set(type, msgs.concat(msgList))\r\n        } else {\r\n            this[_emitList].set(type, [...msg])\r\n        }\r\n        // 执行回调函数\r\n        if (this[_eventList].has(type)) {\r\n            let fns = this[_eventList].get(type);\r\n            fns.forEach(fn => {\r\n                fn.call(this, ...msg);\r\n                this[_debug] && utils.log(`emit ${msg}`);\r\n            })\r\n            return;\r\n        }\r\n        this[_debug] && utils.log(`${type} emit a message `)\r\n    }\r\n\r\n    /**\r\n     * 取消订阅函数\r\n     * @param {*} 事件主题 \r\n     * @param {*} 回调函数\r\n     */\r\n    off(type, ...fn) {\r\n        if (this[_eventList].has(type)) {\r\n            if ([...fn].length === 0) {\r\n                this[_eventList].set(type, []);\r\n                return;\r\n            } else {\r\n                let fns = this[_eventList].get(type).filter(item => [...fn].indexOf(item) === -1);\r\n                this[_eventList].set(type, fns);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取事件订阅列表\r\n     */\r\n    eventList() {\r\n        return this[_eventList]\r\n    }\r\n\r\n    /**\r\n     * 获取事件发布列表\r\n     */\r\n    emitList() {\r\n        return this[_eventList]\r\n    }\r\n\r\n  }\r\n\r\nmodule.exports = event_bus"],"names":["checkType","arg","type","arguments","length","proType","Object","prototype","toString","apply","substring","toLowerCase","isFun","cb","Error","log","msg","module","_emitList","Symbol","_eventList","_debug","event_bus","option","debug","Map","flag","offline","utils","has","fns","get","set","concat","msgList","forEach","temp","off","on","msgs","call","fn","filter","indexOf","item"],"mappings":"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"}