{"version":3,"file":"event_bus.js","sources":["../src/utils.js","../src/main.js"],"sourcesContent":["\r\n /**\r\n  * 类型判断函数\r\n  * @param {*} arg \r\n  * @param {*} type \r\n  */\r\n function checkType (arg, type)  {\r\n    if ([...arguments].length >= 2) {\r\n        let proType =  Object.prototype.toString.apply(arg);\r\n        return proType.substring(8, proType.length-1).toLowerCase() === type.toLowerCase()\r\n    }\r\n}\r\nmodule.exports = {\r\n    checkType\r\n}\r\n","const utils = require('./utils')\r\n\r\n/**\r\n * 事件订阅发布\r\n * @param {Object} option \r\n */\r\nfunction _Event(option) {\r\n    // 调式模式\r\n    this._debug = option.debug\r\n    this._online = true\r\n    this._eventList = new Map();\r\n    this._emitList = new Map();\r\n\r\n    /**\r\n     * 注册回调函数\r\n     * @param {*} type 注册主题\r\n     * @param {Function} cb  回调函数\r\n     * @param {Boolean} flag  true:向函数队列头插入\r\n     * @param {Boolean} offline  true:支持离线消息\r\n     */\r\n    function on(type, cb, flag, offline) {\r\n        if (isFun(cb)) {\r\n            if (_eventList.has(type)) {\r\n                let fns = _eventList.get(type)\r\n                // flag为true,则向前插入\r\n                if (flag) {\r\n                    _eventList.set(type, [cb].concat(fns));\r\n                } else {\r\n                    _eventList.set(type, fns.concat([cb]));\r\n                }\r\n            } else {\r\n                _eventList.set(type, [cb])\r\n            }\r\n            // 如果是离线订阅，则执行缓存的emit list\r\n            if (offline) {\r\n                if (_emitList.has(type)) {\r\n                    let msgList = _emitList.get(type)\r\n                    msgList.forEach(msg => {\r\n                        cb(msg)\r\n                    })\r\n                }\r\n            }\r\n            _log(`${type} register a handler `)\r\n        }\r\n    }\r\n    /**\r\n     * 注册回调函数，只回调一次\r\n     * @param {*} type 注册主题\r\n     * @param {Function} cb  回调函数\r\n     * @param {*} flag  true:向函数队列头插入\r\n     */\r\n    function once(type, cb, flag) {\r\n        let temp = function () {\r\n            cb(...arguments);\r\n            this.off(type, temp)\r\n        }\r\n        this.on(type, temp, false)\r\n    }\r\n\r\n    /**\r\n     * 事件发布函数\r\n     * @param {*} type 事件主题 \r\n     * @param {*} msg  发布消息\r\n     */\r\n    function emit(type, ...msg) {\r\n        let msgList = [...msg];\r\n        // 缓存发布记录\r\n        if (_emitList.has(type)) {\r\n            let msgs = _emitList.get(type);\r\n            _emitList.set(type, msgs.concat(msgList))\r\n        } else {\r\n            _emitList.set(type, [...msg])\r\n        }\r\n        // 执行回调函数\r\n        if (_eventList.has(type)) {\r\n            let fns = _eventList.get(type);\r\n            fns.forEach(fn => {\r\n                fn.call(this, ...msg);\r\n                _log(`emit ${msg}`);\r\n            })\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取消订阅函数\r\n     * @param {*} 事件主题 \r\n     * @param {*} 回调函数\r\n     */\r\n    function off(type, ...fn) {\r\n        if (_eventList.has(type)) {\r\n            if ([...fn].length === 0) {\r\n                _eventList.set(type, []);\r\n                return;\r\n            } else {\r\n                let fns = _eventList.get(type).filter(item => [...fn].indexOf(item) === -1);\r\n                _eventList.set(type, fns);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取事件订阅列表\r\n     */\r\n    function eventList() {\r\n        return _eventList\r\n    }\r\n\r\n    /**\r\n     * 获取事件发布列表\r\n     */\r\n    function emitList() {\r\n        return _eventList\r\n    }\r\n\r\n    /**\r\n     * 判断是否为一个函数\r\n     * @param {*} cb \r\n     */\r\n    function isFun(cb) {\r\n        if (utils.checkType(cb, 'function')) {\r\n            return true;\r\n        } else {\r\n            throw new Error('rguments callBack accept a Function');\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 日志打印\r\n     * @param {*} msg \r\n     */\r\n    function _log(msg) {\r\n        if (this._debug) {\r\n            console.info(msg)\r\n        }\r\n    }\r\n    return {\r\n        eventList,\r\n        emitList,\r\n        on,\r\n        emit,\r\n        off,\r\n        once,\r\n    }\r\n}\r\n\r\nexports.default = _Event({});"],"names":["checkType","arg","type","arguments","length","proType","Object","prototype","toString","apply","substring","toLowerCase","_Event","option","_log","msg","this","_debug","console","info","debug","_online","_eventList","Map","_emitList","eventList","emitList","on","cb","flag","offline","utils","Error","isFun","has","fns","get","set","concat","forEach","emit","msgList","msgs","fn","call","off","once","temp"],"mappings":"aAMC,SAASA,UAAWC,EAAKC,GACtB,OAAQC,WAAWC,QAAU,EAAG,CAC5B,IAAIC,EAAWC,OAAOC,UAAUC,SAASC,MAAMR,GAC/C,OAAOI,EAAQK,UAAU,EAAGL,EAAQD,OAAO,GAAGO,gBAAkBT,EAAKS,eAG7E,WACIX,UAAAA,WCPJ,SAASY,OAAOC,GA+HZ,SAASC,EAAKC,GACNC,KAAKC,QACLC,QAAQC,KAAKJ,GAGrB,OAlIAC,KAAKC,OAASJ,EAAOO,MACrBJ,KAAKK,SAAU,EACfL,KAAKM,WAAa,IAAIC,IACtBP,KAAKQ,UAAY,IAAID,KAgIjBE,UAlCJ,WACI,OAAOH,YAkCPI,SA5BJ,WACI,OAAOJ,YA4BPK,GAzHJ,SAAYzB,EAAM0B,EAAIC,EAAMC,GACxB,GAmGJ,SAAeF,GACX,GAAIG,MAAM/B,UAAU4B,EAAI,YACpB,OAAO,EAEP,MAAM,IAAII,MAAM,uCAvGhBC,CAAML,GAAK,CACX,GAAIN,WAAWY,IAAIhC,GAAO,CACtB,IAAIiC,EAAMb,WAAWc,IAAIlC,GAErB2B,EACAP,WAAWe,IAAInC,GAAO0B,GAAIU,OAAOH,IAEjCb,WAAWe,IAAInC,EAAMiC,EAAIG,QAAQV,UAGrCN,WAAWe,IAAInC,GAAO0B,IAGtBE,GACIN,UAAUU,IAAIhC,IACAsB,UAAUY,IAAIlC,GACpBqC,QAAQxB,IACZa,EAAGb,KAIfD,KAAQZ,2BAoGZsC,KA9EJ,SAActC,KAASa,GACnB,IAAI0B,MAAc1B,GAElB,GAAIS,UAAUU,IAAIhC,GAAO,CACrB,IAAIwC,EAAOlB,UAAUY,IAAIlC,GACzBsB,UAAUa,IAAInC,EAAMwC,EAAKJ,OAAOG,SAEhCjB,UAAUa,IAAInC,MAAUa,IAGxBO,WAAWY,IAAIhC,IACLoB,WAAWc,IAAIlC,GACrBqC,QAAQI,IACRA,EAAGC,KAAK5B,QAASD,GACjBD,UAAaC,QAiErB8B,IAtDJ,SAAa3C,KAASyC,GAClB,GAAIrB,WAAWY,IAAIhC,GAAnB,CACI,GAAuB,QAAfyC,GAAIvC,OAER,YADAkB,WAAWe,IAAInC,MAIfoB,WAAWe,IAAInC,EAAMiC,OAgD7BW,KA7FJ,SAAc5C,EAAM0B,EAAIC,GACpB,IAAIkB,EAAO,WACPnB,KAAMzB,WACNa,KAAK6B,IAAI3C,EAAM6C,IAEnB/B,KAAKW,GAAGzB,EAAM6C,GAAM,KA4F5B,cAAkBnC"}