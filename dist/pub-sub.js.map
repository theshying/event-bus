{"version":3,"file":"pub-sub.js","sources":["../src/utils.js","../src/main.js"],"sourcesContent":["\r\n /**\r\n  * 类型判断函数\r\n  * @param {*} arg \r\n  * @param {*} type \r\n  */\r\n function checkType (arg, type)  {\r\n    if ([...arguments].length >= 2) {\r\n        let proType =  Object.prototype.toString.apply(arg);\r\n        return proType.substring(8, proType.length-1).toLowerCase() === type.toLowerCase()\r\n    }\r\n}\r\n\r\n  /**\r\n     * 判断是否为一个函数\r\n     * @param {*} cb \r\n     */\r\n    function isFun(cb) {\r\n        return checkType(cb, 'function')\r\n    }\r\n\r\n    /**\r\n     * 日志打印\r\n     * @param {*} msg \r\n     */\r\n     function log(msg) {\r\n         console.log(msg)\r\n    }\r\n\r\n    /**\r\n     * warn\r\n     */\r\n    function warn(msg) {\r\n        console.warn(msg)\r\n    }\r\n\r\n    /**\r\n     * error\r\n     */\r\n    function error(msg) {\r\n        console.error(msg)\r\n    }\r\nmodule.exports = {\r\n    checkType,\r\n    isFun,\r\n    log,\r\n    warn,\r\n    error\r\n}\r\n","const utils = require('./utils')\r\nconst _emitList = Symbol('_emitList');\r\nconst _eventList = Symbol('_eventList');\r\nconst _debug = Symbol('_debug');\r\n/**\r\n * 事件订阅发布\r\n * @param {Object} option \r\n */\r\n\r\nclass event_bus {\r\n    constructor(option) {\r\n        // 调式模式\r\n        this[_debug] = option ? option.debug || false : false\r\n        // 事件订阅队列\r\n        this[_eventList] = new Map();\r\n        // 事件发布队列\r\n        this[_emitList] = new Map();\r\n    }\r\n\r\n    /**\r\n     * 注册回调函数\r\n     * @param {*} type 注册主题\r\n     * @param {Function} cb  回调函数\r\n     * @param {Boolean} offline  true:支持离线消息\r\n     * @param {Boolean} flag  true:向函数队列头插入\r\n     */\r\n    on(type, cb, offline, flag) {\r\n        if (utils.isFun(cb)) {\r\n            if (this[_eventList].has(type)) {\r\n                let fns = this[_eventList].get(type)\r\n                // flag为true,则向前插入\r\n                if (flag) {\r\n                    this[_eventList].set(type, [cb].concat(fns));\r\n                } else {\r\n                   this[_eventList].set(type, fns.concat([cb]));\r\n                }\r\n            } else {\r\n                this[_eventList].set(type, [cb])\r\n            }\r\n            // 如果是离线订阅，则执行缓存的emit list\r\n            if (offline) {\r\n                if (this[_emitList].has(type)) {\r\n                    let msgList = this[_emitList].get(type)\r\n                    msgList.forEach(msg => {\r\n                        cb.call(this, msg)\r\n                    })\r\n                    // 异步执行，防止阻塞订阅\r\n                    setTimeout(() => {\r\n                        msgList.forEach(msg => {\r\n                            cb(msg)\r\n                        })\r\n                    }, 0)\r\n                }\r\n            }\r\n            this[_debug] && utils.log(`${type} register a handler `)\r\n        } else {\r\n            utils.error(`type error:pubish handler must to be a Function , not a ${typeof cb}`)\r\n        }\r\n    }\r\n\r\n   /**\r\n    * \r\n     * @param {*} type 注册主题\r\n     * @param {Function} cb  回调函数\r\n     * @param {Boolean} offline  true:支持离线消息\r\n     * @param {Boolean} flag  true:向函数队列头插入\r\n    */\r\n    once(type, cb,offline, flag) {\r\n        let temp = function () {\r\n            cb(...arguments);\r\n            this.off(type, temp)\r\n        }\r\n        this.on(type, temp, offline, flag)\r\n    }\r\n    /**\r\n  * 事件发布函数\r\n  * @param {*} type 事件主题 \r\n  * @param {*} msg  发布消息\r\n  */\r\n    emit(type, ...msg) {\r\n        let msgList = [...msg];\r\n        // 缓存发布记录\r\n        if (this[_emitList].has(type)) {\r\n            let msgs = this[_emitList].get(type);\r\n            this[_emitList].set(type, msgs.concat(msgList))\r\n        } else {\r\n            this[_emitList].set(type, [...msg])\r\n        }\r\n        // 执行回调函数\r\n        if (this[_eventList].has(type)) {\r\n            let fns = this[_eventList].get(type);\r\n            fns.forEach(fn => {\r\n                msgList.forEach(m => {\r\n                    fn.call(this, m);\r\n                })\r\n              \r\n                this[_debug] && utils.log(`emit ${msg}`);\r\n            })\r\n            return;\r\n        }\r\n        this[_debug] && utils.log(`${type} emit a message `)\r\n    }\r\n\r\n    /**\r\n     * 取消订阅函数\r\n     * @param {*} 事件主题 \r\n     * @param {*} 回调函数\r\n     */\r\n    off(type, ...fn) {\r\n        if (this[_eventList].has(type)) {\r\n            if ([...fn].length === 0) {\r\n                this[_eventList].set(type, []);\r\n                return;\r\n            } else {\r\n                let fns = this[_eventList].get(type).filter(item => [...fn].indexOf(item) === -1);\r\n                this[_eventList].set(type, fns);\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取事件订阅列表\r\n     */\r\n    eventList() {\r\n        return this[_eventList]\r\n    }\r\n\r\n    /**\r\n     * 获取事件发布列表\r\n     */\r\n    emitList() {\r\n        return this[_emitList]\r\n    }\r\n\r\n  }\r\n\r\nmodule.exports = event_bus"],"names":["checkType","arg","type","arguments","length","proType","Object","prototype","toString","apply","substring","toLowerCase","module","cb","msg","log","warn","error","_emitList","Symbol","_eventList","_debug","option","debug","Map","offline","flag","utils","isFun","this","has","fns","get","set","concat","msgList","forEach","call","_this","on","temp","off","msgs","_this2","m","fn","filter","indexOf","item"],"mappings":"sLAMC,SAASA,EAAWC,EAAKC,2CACdC,YAAWC,QAAU,EAAG,KACxBC,EAAWC,OAAOC,UAAUC,SAASC,MAAMR,UACxCI,EAAQK,UAAU,EAAGL,EAAQD,OAAO,GAAGO,gBAAkBT,EAAKS,eAiC7EC,yBAzBI,SAAeC,UACJb,EAAUa,EAAI,iBAOxB,SAAaC,WACDC,IAAID,SAMjB,SAAcA,WACFE,KAAKF,UAMjB,SAAeA,WACHG,MAAMH,scCvCtB,IAAMI,EAAYC,OAAO,aACnBC,EAAaD,OAAO,cACpBE,EAASF,OAAO,uCAONG,8GAEHD,GAAUC,GAASA,EAAOC,QAAiB,OAE3CH,GAAc,IAAII,SAElBN,GAAa,IAAIM,yCAUvBtB,EAAMW,EAAIY,EAASC,iBACdC,EAAMC,MAAMf,GAAK,IACbgB,KAAKT,GAAYU,IAAI5B,GAAO,KACxB6B,EAAMF,KAAKT,GAAYY,IAAI9B,GAE3BwB,OACKN,GAAYa,IAAI/B,GAAOW,GAAIqB,OAAOH,SAEnCX,GAAYa,IAAI/B,EAAM6B,EAAIG,QAAQrB,eAGrCO,GAAYa,IAAI/B,GAAOW,OAG5BY,GACII,KAAKX,GAAWY,IAAI5B,GAAO,KACvBiC,EAAUN,KAAKX,GAAWc,IAAI9B,KAC1BkC,QAAQ,cACTC,KAAKC,EAAMxB,gBAGP,aACCsB,QAAQ,cACTtB,MAER,QAGNO,IAAWM,EAAMZ,IAAOb,iCAEvBe,2EAAwEJ,gBAAAA,kCAWjFX,EAAMW,EAAGY,EAASC,QAKda,GAAGrC,EAJG,SAAPsC,mBACMrC,gBACDsC,IAAIvC,EAAMsC,IAECf,EAASC,gCAO5BxB,qCAASY,uDACNqB,YAAcrB,MAEde,KAAKX,GAAWY,IAAI5B,GAAO,KACvBwC,EAAOb,KAAKX,GAAWc,IAAI9B,QAC1BgB,GAAWe,IAAI/B,EAAMwC,EAAKR,OAAOC,cAEjCjB,GAAWe,IAAI/B,YAAUY,IAG9Be,KAAKT,GAAYU,IAAI5B,GACX2B,KAAKT,GAAYY,IAAI9B,GAC3BkC,QAAQ,cACAA,QAAQ,cACTC,KAAKM,EAAMC,OAGbvB,IAAWM,EAAMZ,YAAYD,UAIrCO,IAAWM,EAAMZ,IAAOb,kDAQ7BA,8BAAS2C,sDACLhB,KAAKT,GAAYU,IAAI5B,OACE,cAAf2C,GAAIzC,wBACHgB,GAAYa,IAAI/B,UAGjB6B,EAAMF,KAAKT,GAAYY,IAAI9B,GAAM4C,OAAO,mBAAmC,cAAvBD,GAAIE,QAAQC,UAC/D5B,GAAYa,IAAI/B,EAAM6B,oDAU5BF,KAAKT,6CAOLS,KAAKX"}